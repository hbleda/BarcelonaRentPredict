import pandas as pd
import numpy as np
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split, GridSearchCV, ShuffleSplit
import pickle
import json

# Suponiendo que df5 ya está definido anteriormente

# División de datos en características y etiquetas
X = df5.drop(['precio', 'precio_range', 'barrio', 'distrito'], axis='columns')
y = df5['precio']

# División de datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)

# Preprocesamiento usando ColumnTransformer y OneHotEncoder
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), ['barrio', 'distrito']),
    ], 
    remainder='passthrough'
)

# Creación del pipeline
pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor())
])

# Entrenamiento del pipeline
pipeline.fit(X_train, y_train)

# Puntuación
score = pipeline.score(X_test, y_test)
print("Score:", score)

# Función de predicción
def predict_price(distrito, barrio, superficie, baños, habitaciones):
    return pipeline.predict([[barrio, distrito, superficie, baños, habitaciones]])[0]

# Guardando el modelo
with open('barcelona_home_prices_model_pipeline.pickle', 'wb') as f:
    pickle.dump(pipeline, f)

# Guardando las columnas
columns = {
    'data_columns': [col for col in X.columns] + list(pipeline.named_steps['preprocessor'].transformers_[0][1].get_feature_names_out(['barrio', 'distrito']))
}

with open("columns_pipeline.json", "w", encoding='utf-8') as f:
    f.write(json.dumps(columns, ensure_ascii=False))
